var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var fs = require("fs");
var path = require("path");
var singlePathMethods = [
    "access",
    "appendFile",
    "chmod",
    "chown",
    "exists",
    "lchmod",
    "lchown",
    "lstat",
    "mkdir",
    "readdir",
    "readFile",
    "readlink",
    "realpath",
    "rmdir",
    "stat",
    "truncate",
    "unlink",
    "utimes",
    "writeFile",
];
var singlePathSyncMethods = [
    "createReadStream",
    "createWriteStream",
    "unwatchFile",
    "watch",
    "watchFile",
];
var currentNewPathMethods = [
    "link",
    "rename",
    "symlink",
];
var fdMethods = [
    "fchmod",
    "fchown",
    "fdatasync",
    "fstat",
    "fsync",
    "ftruncate",
    "futimes",
];
var fdMultiReturnMethods = [
    "read",
    "write",
];
var statsMethods = [
    "isFile",
    "isDirectory",
    "isBlockDevice",
    "isCharacterDevice",
    "isSymbolicLink",
    "isFIFO",
    "isSocket",
];
var childRe = new RegExp("^\\.\\.(?:\\" + path.sep + "\\.\\.)*$");
var FileSystemObject = /** @class */ (function () {
    function FileSystemObject() {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        this.path = path.join.apply(path, paths);
    }
    FileSystemObject.prototype.toString = function () {
        return this.path;
    };
    // fs methods
    FileSystemObject.prototype.open = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[args.length - 1] instanceof Function) {
            var callback_1 = args.pop();
            fs.open.apply(fs, __spreadArrays([this.path], args, [function (error, fd) {
                    _this.fd = fd;
                    callback_1(error, fd);
                }]));
        }
        else {
            return new Promise(function (resolve, reject) {
                fs.open.apply(fs, __spreadArrays([_this.path], args, [function (error, fd) {
                        _this.fd = fd;
                        error == null ? resolve(fd) : reject(error);
                    }]));
            });
        }
    };
    FileSystemObject.prototype.openSync = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (this.fd = fs.openSync.apply(fs, __spreadArrays([this.path], args)));
    };
    FileSystemObject.prototype.close = function (callback) {
        var _this = this;
        if (callback) {
            fs.close(this.fd, function (error) {
                if (error == null)
                    delete _this.fd;
                callback(error);
            });
        }
        else {
            return new Promise(function (resolve, reject) {
                return fs.close(_this.fd, function (error) {
                    if (error == null) {
                        delete _this.fd;
                        resolve();
                    }
                    else {
                        reject(error);
                    }
                });
            });
        }
    };
    FileSystemObject.prototype.closeSync = function () {
        fs.closeSync(this.fd);
        delete this.fd;
    };
    // convenient additions
    FileSystemObject.prototype.mkdirp = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var callback, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(args[args.length - 1] instanceof Function)) return [3 /*break*/, 5];
                        callback = args.pop();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, FileSystemObject._mkdirRecursive.apply(FileSystemObject, __spreadArrays([this], args))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        callback(error_1);
                        return [2 /*return*/];
                    case 4:
                        callback();
                        return [3 /*break*/, 6];
                    case 5: return [2 /*return*/, FileSystemObject._mkdirRecursive.apply(FileSystemObject, __spreadArrays([this], args))];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject._mkdirRecursive = function (dir) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 5]);
                        return [4 /*yield*/, dir.lstat()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 2:
                        error_2 = _a.sent();
                        return [4 /*yield*/, FileSystemObject._mkdirRecursive(dir.parent())];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, dir.mkdir.apply(dir, args)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject.prototype.mkdirpSync = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return FileSystemObject._mkdirRecursiveSync.apply(FileSystemObject, __spreadArrays([this], args));
    };
    FileSystemObject._mkdirRecursiveSync = function (dir) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        try {
            dir.statSync();
        }
        catch (error) {
            FileSystemObject._mkdirRecursiveSync(dir.parent());
            dir.mkdirSync.apply(dir, args);
        }
    };
    FileSystemObject.prototype.mkpath = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.mkdirp.apply(this, args);
    };
    FileSystemObject.prototype.mkpathSync = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.mkdirpSync.apply(this, args);
    };
    FileSystemObject.prototype.mkdirAll = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.mkdirp.apply(this, args);
    };
    FileSystemObject.prototype.mkdirAllSync = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.mkdirpSync.apply(this, args);
    };
    FileSystemObject.prototype.readdirAll = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var children, error_3;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!callback) return [3 /*break*/, 5];
                        children = void 0;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.childrenAll()];
                    case 2:
                        children = (_a.sent()).map(function (child) { return _this.relative(child).toString(); });
                        return [3 /*break*/, 4];
                    case 3:
                        error_3 = _a.sent();
                        callback(error_3);
                        return [2 /*return*/];
                    case 4:
                        callback(undefined, children);
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, this.childrenAll()];
                    case 6: return [2 /*return*/, (_a.sent()).map(function (child) { return _this.relative(child).toString(); })];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject.prototype.readdirAllSync = function () {
        var _this = this;
        return this.childrenAllSync().map(function (child) { return _this.relative(child).toString(); });
    };
    FileSystemObject.prototype.rmAll = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, child, error_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 9, , 10]);
                        _i = 0;
                        return [4 /*yield*/, this.childrenAll()];
                    case 1:
                        _a = (_b.sent()).reverse();
                        _b.label = 2;
                    case 2:
                        if (!(_i < _a.length)) return [3 /*break*/, 8];
                        child = _a[_i];
                        return [4 /*yield*/, child.isDirectory()];
                    case 3:
                        if (!_b.sent()) return [3 /*break*/, 5];
                        return [4 /*yield*/, child.rmdir()];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, child.unlink()];
                    case 6:
                        _b.sent();
                        _b.label = 7;
                    case 7:
                        _i++;
                        return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        error_4 = _b.sent();
                        if (callback) {
                            callback(error_4);
                            return [2 /*return*/];
                        }
                        throw error_4;
                    case 10:
                        if (callback)
                            callback();
                        return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject.prototype.rmAllSync = function () {
        for (var _i = 0, _a = this.childrenAllSync().reverse(); _i < _a.length; _i++) {
            var child = _a[_i];
            if (child.isDirectorySync()) {
                child.rmdirSync();
            }
            else {
                child.unlinkSync();
            }
        }
    };
    FileSystemObject.prototype.rmtree = function (callback) {
        return this.rmAll(callback);
    };
    FileSystemObject.prototype.rmtreeSync = function () {
        return this.rmAllSync();
    };
    FileSystemObject.prototype.mergeDirectory = function (source, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.filteredMergeDirectory(source, undefined, callback)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject.prototype.mergeDirectorySync = function (source) {
        this.filteredMergeDirectorySync(source);
    };
    // eslint-disable-next-line max-statements
    FileSystemObject.prototype.filteredMergeDirectory = function (source, excepts, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, child, relativePath, childTarget, _b, _c, _d, error_5;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 12, , 13]);
                        _i = 0;
                        return [4 /*yield*/, source.filteredChildrenAll(excepts)];
                    case 1:
                        _a = _e.sent();
                        _e.label = 2;
                    case 2:
                        if (!(_i < _a.length)) return [3 /*break*/, 11];
                        child = _a[_i];
                        relativePath = source.relative(child.toString());
                        childTarget = this["new"](relativePath.toString());
                        return [4 /*yield*/, childTarget.parent().mkdirp()];
                    case 3:
                        _e.sent();
                        return [4 /*yield*/, child.isDirectory()];
                    case 4:
                        if (!(_e.sent())) return [3 /*break*/, 6];
                        return [4 /*yield*/, childTarget.mkdir()];
                    case 5:
                        _b = _e.sent();
                        return [3 /*break*/, 9];
                    case 6:
                        _d = (_c = childTarget).writeFile;
                        return [4 /*yield*/, child.readFile()];
                    case 7: return [4 /*yield*/, _d.apply(_c, [_e.sent()])];
                    case 8:
                        _b = _e.sent();
                        _e.label = 9;
                    case 9:
                        _b;
                        _e.label = 10;
                    case 10:
                        _i++;
                        return [3 /*break*/, 2];
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        error_5 = _e.sent();
                        if (callback) {
                            callback(error_5);
                            return [2 /*return*/];
                        }
                        throw error_5;
                    case 13:
                        if (callback)
                            callback();
                        return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject.prototype.filteredMergeDirectorySync = function (source, excepts) {
        for (var _i = 0, _a = source.filteredChildrenAllSync(excepts); _i < _a.length; _i++) {
            var child = _a[_i];
            var relativePath = source.relative(child.toString());
            var childTarget = this["new"](relativePath.toString());
            childTarget.parent().mkdirpSync();
            child.isDirectorySync() ? childTarget.mkdirSync() : childTarget.writeFileSync(child.readFileSync());
        }
    };
    FileSystemObject.prototype.isChildOf = function (to) {
        return childRe.test(path.relative(this.path, to.toString()));
    };
    FileSystemObject.prototype.isParentOf = function (to) {
        var relativePath = path.relative(this.path, to.toString());
        return relativePath.length && !relativePath.startsWith("..");
    };
    Object.defineProperty(FileSystemObject.prototype, "delimiter", {
        // path methods
        get: function () {
            return path.delimiter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileSystemObject.prototype, "sep", {
        get: function () {
            return path.sep;
        },
        enumerable: true,
        configurable: true
    });
    FileSystemObject.format = function (pathObject) {
        return new FileSystemObject(path.format(pathObject));
    };
    FileSystemObject.prototype.parse = function () {
        return path.parse(this.path);
    };
    FileSystemObject.prototype.normalize = function () {
        return this;
    };
    FileSystemObject.prototype.basename = function (ext) {
        return new FileSystemObject(path.basename(this.path, ext));
    };
    FileSystemObject.prototype.dirname = function () {
        return this.parent();
    };
    FileSystemObject.prototype.extname = function () {
        return path.extname(this.path);
    };
    FileSystemObject.prototype.isAbsolute = function () {
        return path.isAbsolute(this.path);
    };
    FileSystemObject.prototype.relative = function (to) {
        return new FileSystemObject(path.relative(this.path, to.toString()));
    };
    FileSystemObject.prototype.resolve = function () {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        return new FileSystemObject(path.resolve.apply(path, paths.map(function (_path) { return _path.toString(); }).concat([this.path])));
    };
    // objective methods
    FileSystemObject.prototype["new"] = function () {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        return new FileSystemObject(path.join.apply(path, __spreadArrays([this.path], paths)));
    };
    FileSystemObject.prototype.join = function () {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        return this["new"].apply(this, paths);
    };
    FileSystemObject.prototype.parent = function () {
        return new FileSystemObject(path.dirname(this.path));
    };
    FileSystemObject.prototype.children = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var children, error_6;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!callback) return [3 /*break*/, 5];
                        children = void 0;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.readdir()];
                    case 2:
                        children = (_a.sent()).map(function (entryPath) { return _this["new"](entryPath); });
                        return [3 /*break*/, 4];
                    case 3:
                        error_6 = _a.sent();
                        callback(error_6);
                        return [2 /*return*/];
                    case 4:
                        callback(undefined, children);
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, this.readdir()];
                    case 6: return [2 /*return*/, (_a.sent()).map(function (entryPath) { return _this["new"](entryPath); })];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject.prototype.childrenSync = function () {
        var _this = this;
        return this.readdirSync().map(function (entryPath) { return _this["new"](entryPath); });
    };
    FileSystemObject.prototype.filteredChildren = function (excepts, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var _excepts, children, _a, _b, error_7, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _excepts = excepts instanceof Array ? this._makeExceptPaths(excepts) : excepts;
                        if (!callback) return [3 /*break*/, 6];
                        children = void 0;
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 4, , 5]);
                        _b = (_a = FileSystemObject)._filterChildren;
                        return [4 /*yield*/, this.children()];
                    case 2: return [4 /*yield*/, _b.apply(_a, [_e.sent(), _excepts, true])];
                    case 3:
                        children = _e.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_7 = _e.sent();
                        callback(error_7);
                        return [2 /*return*/];
                    case 5:
                        callback(undefined, children);
                        return [3 /*break*/, 9];
                    case 6:
                        _d = (_c = FileSystemObject)._filterChildren;
                        return [4 /*yield*/, this.children()];
                    case 7: return [4 /*yield*/, _d.apply(_c, [_e.sent(), _excepts])];
                    case 8: return [2 /*return*/, _e.sent()];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject.prototype.filteredChildrenSync = function (excepts) {
        var _excepts = excepts instanceof Array ? this._makeExceptPaths(excepts) : excepts;
        return FileSystemObject._filterChildrenSync(this.childrenSync(), _excepts);
    };
    FileSystemObject.prototype.childrenAll = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var children, error_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!callback) return [3 /*break*/, 5];
                        children = void 0;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, FileSystemObject._childrenRecursive(this, undefined, true)];
                    case 2:
                        children = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_8 = _a.sent();
                        callback(error_8);
                        return [2 /*return*/];
                    case 4:
                        callback(undefined, children);
                        return [3 /*break*/, 6];
                    case 5: return [2 /*return*/, FileSystemObject._childrenRecursive(this)];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject._childrenRecursive = function (dir, excepts, hasCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var children, _a, _b, childrenChildren;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = FileSystemObject)._filterChildren;
                        return [4 /*yield*/, dir.children()];
                    case 1: return [4 /*yield*/, _b.apply(_a, [_c.sent(), excepts, hasCallback])];
                    case 2:
                        children = _c.sent();
                        return [4 /*yield*/, Promise.all(children.map(function (child) { return __awaiter(_this, void 0, void 0, function () { var _a, _b, _c; return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0: return [4 /*yield*/, child.isDirectory()];
                                    case 1:
                                        if (!(_d.sent())) return [3 /*break*/, 3];
                                        _c = (_b = [child]).concat;
                                        return [4 /*yield*/, FileSystemObject._childrenRecursive(child, excepts)];
                                    case 2:
                                        _a = _c.apply(_b, [_d.sent()]);
                                        return [3 /*break*/, 4];
                                    case 3:
                                        _a = [child];
                                        _d.label = 4;
                                    case 4: return [2 /*return*/, _a];
                                }
                            }); }); }))];
                    case 3:
                        childrenChildren = _c.sent();
                        return [2 /*return*/, childrenChildren.reduce(function (flat, childChildren) { return flat.concat(childChildren); }, [])];
                }
            });
        });
    };
    FileSystemObject._filterChildren = function (children, excepts, hasCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var conditions_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!excepts) return [3 /*break*/, 1];
                        return [2 /*return*/, children];
                    case 1:
                        if (!(excepts instanceof Array)) return [3 /*break*/, 2];
                        return [2 /*return*/, FileSystemObject._filterChildrenByPaths(children, excepts)];
                    case 2: return [4 /*yield*/, Promise.all(hasCallback
                            ? children.map(function (child) { return new Promise(function (resolve, reject) {
                                return excepts(child, function (error, condition) { return error ? reject(error) : resolve(condition); });
                            }); })
                            : children.map(excepts))];
                    case 3:
                        conditions_1 = _a.sent();
                        return [2 /*return*/, children.filter(function (child, index) { return conditions_1[index]; })];
                }
            });
        });
    };
    FileSystemObject.prototype.childrenAllSync = function () {
        return FileSystemObject._childrenRecursiveSync(this);
    };
    FileSystemObject._childrenRecursiveSync = function (dir, excepts) {
        var children = FileSystemObject._filterChildrenSync(dir.childrenSync(), excepts);
        var childrenChildren = children.map(function (child) {
            return child.isDirectorySync() ? [child].concat(FileSystemObject._childrenRecursiveSync(child, excepts)) : [child];
        });
        return childrenChildren.reduce(function (flat, childChildren) { return flat.concat(childChildren); }, []);
    };
    FileSystemObject._filterChildrenSync = function (children, excepts) {
        if (!excepts) {
            return children;
        }
        else if (excepts instanceof Array) {
            return FileSystemObject._filterChildrenByPaths(children, excepts);
        }
        else {
            return children.filter(excepts);
        }
    };
    FileSystemObject._filterChildrenByPaths = function (children, exceptPaths) {
        return children.filter(function (child) {
            var index = exceptPaths.indexOf(child.path);
            if (index === -1) {
                return true;
            }
            else {
                exceptPaths.splice(index, 1); // destructive
                return false;
            }
        });
    };
    FileSystemObject.prototype.filteredChildrenAll = function (excepts, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var _excepts, children, error_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _excepts = excepts instanceof Array ? this._makeExceptPaths(excepts) : excepts;
                        if (!callback) return [3 /*break*/, 5];
                        children = void 0;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, FileSystemObject._childrenRecursive(this, _excepts, true)];
                    case 2:
                        children = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_9 = _a.sent();
                        callback(error_9);
                        return [2 /*return*/];
                    case 4:
                        callback(undefined, children);
                        return [3 /*break*/, 6];
                    case 5: return [2 /*return*/, FileSystemObject._childrenRecursive(this, _excepts)];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    FileSystemObject.prototype.filteredChildrenAllSync = function (excepts) {
        var _excepts = excepts instanceof Array ? this._makeExceptPaths(excepts) : excepts;
        return FileSystemObject._childrenRecursiveSync(this, _excepts);
    };
    FileSystemObject.prototype._makeExceptPaths = function (exceptPaths) {
        var _this = this;
        return exceptPaths.map(function (exceptPath) { return path.join(_this.path, exceptPath.toString()); });
    };
    return FileSystemObject;
}());
for (var _i = 0, singlePathMethods_1 = singlePathMethods; _i < singlePathMethods_1.length; _i++) {
    var _method = singlePathMethods_1[_i];
    FileSystemObject.prototype[_method] = (function (method) {
        return function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (args[args.length - 1] instanceof Function) {
                fs[method].apply(fs, __spreadArrays([this.path], args));
            }
            else {
                return new Promise(function (resolve, reject) {
                    return fs[method].apply(fs, __spreadArrays([_this.path], args, [function (error, result) {
                            return error == null ? resolve(result) : reject(error);
                        }]));
                });
            }
        };
    })(_method);
    FileSystemObject.prototype[_method + "Sync"] = (function (methodSync) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return fs[methodSync].apply(fs, __spreadArrays([this.path], args));
        };
    })(_method + "Sync");
}
for (var _a = 0, singlePathSyncMethods_1 = singlePathSyncMethods; _a < singlePathSyncMethods_1.length; _a++) {
    var _method = singlePathSyncMethods_1[_a];
    FileSystemObject.prototype[_method] = (function (method) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return fs[method].apply(fs, __spreadArrays([this.path], args));
        };
    })(_method);
}
for (var _b = 0, currentNewPathMethods_1 = currentNewPathMethods; _b < currentNewPathMethods_1.length; _b++) {
    var _method = currentNewPathMethods_1[_b];
    FileSystemObject.prototype[_method] = (function (method) {
        return function (newPath) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var currentPath = this.path;
            var _newPath = path.resolve(path.dirname(this.path), newPath);
            if (args[args.length - 1] instanceof Function) {
                fs[method].apply(fs, __spreadArrays([currentPath, _newPath], args));
            }
            else {
                return new Promise(function (resolve, reject) {
                    return fs[method].apply(fs, __spreadArrays([currentPath, _newPath], args, [function (error, result) {
                            return error == null ? resolve(result) : reject(error);
                        }]));
                });
            }
        };
    })(_method);
    FileSystemObject.prototype[_method + "Sync"] = (function (methodSync) {
        return function (newPath) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var currentPath = this.path;
            var _newPath = path.resolve(path.dirname(this.path), newPath);
            return fs[methodSync].apply(fs, __spreadArrays([currentPath, _newPath], args));
        };
    })(_method + "Sync");
}
for (var _c = 0, fdMethods_1 = fdMethods; _c < fdMethods_1.length; _c++) {
    var _method = fdMethods_1[_c];
    FileSystemObject.prototype[_method] = (function (method) {
        return function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (args[args.length - 1] instanceof Function) {
                fs[method].apply(fs, __spreadArrays([this.fd], args));
            }
            else {
                return new Promise(function (resolve, reject) {
                    return fs[method].apply(fs, __spreadArrays([_this.fd], args, [function (error, result) {
                            return error == null ? resolve(result) : reject(error);
                        }]));
                });
            }
        };
    })(_method);
    FileSystemObject.prototype[_method + "Sync"] = (function (methodSync) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return fs[methodSync].apply(fs, __spreadArrays([this.fd], args));
        };
    })(_method + "Sync");
}
for (var _d = 0, fdMultiReturnMethods_1 = fdMultiReturnMethods; _d < fdMultiReturnMethods_1.length; _d++) {
    var _method = fdMultiReturnMethods_1[_d];
    FileSystemObject.prototype[_method] = (function (method) {
        return function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (args[args.length - 1] instanceof Function) {
                fs[method].apply(fs, __spreadArrays([this.fd], args));
            }
            else {
                return new Promise(function (resolve, reject) {
                    return fs[method].apply(fs, __spreadArrays([_this.fd], args, [function (error, length) {
                            return error == null ? resolve(length) : reject(error);
                        }]));
                });
            }
        };
    })(_method);
    FileSystemObject.prototype[_method + "Sync"] = (function (methodSync) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return fs[methodSync].apply(fs, __spreadArrays([this.fd], args));
        };
    })(_method + "Sync");
}
for (var _e = 0, statsMethods_1 = statsMethods; _e < statsMethods_1.length; _e++) {
    var _method = statsMethods_1[_e];
    FileSystemObject.prototype[_method] = (function (method) {
        return function (callback) {
            if (callback) {
                this.lstat().then(function (stats) { return callback(undefined, stats[method]()); }, function (error) { return callback(error); });
            }
            else {
                return this.lstat().then(function (stats) { return stats[method](); });
            }
        };
    })(_method);
    FileSystemObject.prototype[_method + "Sync"] = (function (method) {
        return function () {
            return this.lstatSync()[method]();
        };
    })(_method);
}
module.exports = {
    __esModule: true,
    "default": new FileSystemObject(process.cwd()),
    FileSystemObject: FileSystemObject,
    FSO: FileSystemObject
};
//# sourceMappingURL=fso.js.map